{"version":3,"sources":["components/SearchForm.js","components/Repository.js","components/RepositoriesList.js","components/Loader.js","components/PaginationRounded.js","components/App.js","reportWebVitals.js","index.js"],"names":["SearchForm","onSearch","text","totalRepos","inputEl","useRef","action","className","Input","autoFocus","color","placeholder","type","value","ref","onChange","current","firstChild","trim","Repository","repo","name","html_url","forks","stargazers_count","href","GoStar","style","marginRight","GiForkKnifeSpoon","RepositoriesList","repos","showRepos","map","id","fontWeight","justifyContent","textAlign","Loader","useStyles","makeStyles","theme","root","margin","PaginationRounded","reposPerPage","paginate","classes","pageNumbers","i","Math","ceil","push","Pagination","onClick","e","Number","target","textContent","isNaN","count","length","variant","shape","hidePrevButton","hideNextButton","App","useState","searchRepo","setSearchRepo","setShowRepos","loading","setLoading","currentPage","setCurrentPage","setRepos","filteredRepos","setFilteredRepos","getAllRepos","searchName","perPage","a","fetch","res","json","data","items","filterReposToShow","useCallback","filter","toLowerCase","startsWith","useEffect","indexOfLastRepo","indexOfFirstRepo","currentRepos","slice","number","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9854a0b.chunk.js","sourcesContent":["import { Input } from '@material-ui/core';\r\nimport React, { useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SearchForm = ({ onSearch, text, totalRepos = 0 }) => {\r\n  const inputEl = useRef('');\r\n\r\n  const changeHandler = () => {\r\n    const value = inputEl.current.firstChild.value;\r\n    onSearch(value.trim());\r\n  }\r\n\r\n  return (\r\n    <form action=\"#\" className=\"search-form\">\r\n      <Input\r\n        autoFocus\r\n        className=\"search-input\"\r\n        color=\"primary\"\r\n        placeholder=\"type to search\"\r\n        type='search'\r\n        value={text}\r\n        ref={inputEl}\r\n        onChange={changeHandler}\r\n      />\r\n      <div className=\"search-result\">Found {totalRepos} repositories</div>\r\n    </form>\r\n  )\r\n}\r\n\r\nSearchForm.propTypes = {\r\n  onSearch: PropTypes.func,\r\n  text: PropTypes.string,\r\n  totalRepos: PropTypes.number,\r\n}\r\n\r\nexport default SearchForm;\r\n","import { GoStar } from '@react-icons/all-files/go/GoStar';\r\nimport { GiForkKnifeSpoon } from '@react-icons/all-files/gi/GiForkKnifeSpoon';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Repository = ({ repo: { name, html_url, forks, stargazers_count } }) => {\r\n  return (\r\n    <li>\r\n      <a href={html_url} className='repos-name'>{name}</a>\r\n      <div className=\"repos-box\">\r\n        <span className=\"repos-number repos-stars\">\r\n          <GoStar style={{ color: '#bada55', marginRight: \"5px\" }} />\r\n          <span className=\"repos-text\">{stargazers_count}</span>\r\n        </span>\r\n        <span className=\"repos-number repos-forks\">\r\n          <GiForkKnifeSpoon style={{ color: 'grey', marginRight: \"5px\" }} />\r\n          <span className=\"repos-text\">{forks}</span>\r\n        </span>\r\n      </div>\r\n    </li>\r\n  )\r\n}\r\n\r\nRepository.propTypes = {\r\n  name: PropTypes.string,\r\n  html_url: PropTypes.string,\r\n  forks: PropTypes.number,\r\n  stargazers_count: PropTypes.number,\r\n}\r\n\r\nexport default Repository;\r\n","import Repository from './Repository';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst RepositoriesList = ({ repos, showRepos, totalRepos }) => {\r\n  return (\r\n    <ul className='repos-list'>\r\n      {\r\n        showRepos && !!totalRepos\r\n          ? repos.map(repo => <Repository key={repo.id} repo={repo} />)\r\n          : <li\r\n            style={{ fontWeight: '700', justifyContent: 'center', textAlign: 'center' }}>\r\n            No repositories found, please try to adjust your request\r\n          </li>\r\n      }\r\n    </ul>\r\n  )\r\n}\r\n\r\nRepositoriesList.propTypes = {\r\n  repos: PropTypes.arrayOf(PropTypes.object),\r\n  showRepos: PropTypes.bool,\r\n  totalRepos: PropTypes.number\r\n}\r\n\r\nexport default RepositoriesList\r\n","const Loader = () => {\r\n  return <div className=\"spinner\"></div>\r\n}\r\n\r\nexport default Loader\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport { Pagination } from '@material-ui/lab';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: 0,\r\n    },\r\n  },\r\n}))\r\n\r\nconst PaginationRounded = ({ reposPerPage, totalRepos, paginate }) => {\r\n  const classes = useStyles();\r\n  const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(totalRepos / reposPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  const clickHandler = e => {\r\n    const value = Number(e.target.textContent);\r\n    if (!isNaN(value)) {\r\n      paginate(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Pagination\r\n        onClick={clickHandler}\r\n        count={pageNumbers.length}\r\n        variant=\"outlined\"\r\n        shape=\"rounded\"\r\n        hidePrevButton\r\n        hideNextButton\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nPaginationRounded.propTypes = {\r\n  reposPerPage: PropTypes.number,\r\n  totalRepos: PropTypes.number,\r\n  paginate: PropTypes.func,\r\n}\r\n\r\nexport default PaginationRounded;\r\n","import React, { useState, useEffect, useCallback } from 'react';\nimport SearchForm from './SearchForm';\nimport RepositoriesList from './RepositoriesList';\nimport Loader from './Loader';\nimport PaginationRounded from './PaginationRounded';\n\nfunction App() {\n  const [searchRepo, setSearchRepo] = useState('');\n  const [showRepos, setShowRepos] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [repos, setRepos] = useState([]);\n  const [filteredRepos, setFilteredRepos] = useState([]);\n  const [reposPerPage] = useState(6);\n\n  const searchHandler = (repo) => {\n    setSearchRepo(repo);\n    if (repo.length < 2) {\n      setShowRepos(false);\n      setRepos([]);\n      setFilteredRepos([]);\n    }\n  };\n\n  const getAllRepos = async (searchName, perPage) => {\n    setLoading(true);\n    const res = await fetch(\n      `https://api.github.com/search/repositories?q=${searchName}&per_page=${perPage}`\n    );\n    const data = await res.json();\n    setRepos(data.items);\n    setLoading(false);\n  }\n\n  const filterReposToShow = useCallback(() => {\n    const filtered = repos.filter(repo => {\n      return repo.name.toLowerCase().startsWith(searchRepo.toLowerCase());\n    })\n    return filtered;\n  }, [searchRepo, repos])\n\n  useEffect(() => {\n    if (repos.length === 0 && searchRepo.length === 2) {\n      getAllRepos(searchRepo, 100);\n    }\n\n  }, [searchRepo, repos]);\n\n  useEffect(() => {\n    if (repos.length > 0 && searchRepo.length >= 2) {\n      setFilteredRepos(filterReposToShow());\n      setShowRepos(true);\n    }\n\n  }, [searchRepo, repos, filterReposToShow]);\n\n  const indexOfLastRepo = currentPage * reposPerPage;\n  const indexOfFirstRepo = indexOfLastRepo - reposPerPage;\n  const currentRepos = filteredRepos.slice(indexOfFirstRepo, indexOfLastRepo);\n\n  const paginate = number => setCurrentPage(number);\n\n  return (\n    <div className=\"container\">\n      <SearchForm\n        onSearch={searchHandler}\n        text={searchRepo}\n        totalRepos={filteredRepos.length}\n      />\n      {\n        loading\n          ? <Loader />\n          : <RepositoriesList\n            repos={currentRepos}\n            showRepos={showRepos}\n            totalRepos={filteredRepos.length}\n          />\n      }\n      <PaginationRounded\n        reposPerPage={reposPerPage}\n        totalRepos={filteredRepos.length}\n        paginate={paginate}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport './css/style.css';\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}